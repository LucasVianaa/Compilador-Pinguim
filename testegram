<Programa> ::= Declare{<Lista-Declarações>}; Functions{<Lista-Funções>}; Main{<Lista-Instruções>};
<Lista-Instruções> ::= <Instrução> <Lista-Instruções> | ∅
<Lista-Funções> ::= <Função><Lista-Funções> | ∅
<Lista-Declarações> ::= <Declaração> <Lista-Declarações> |  ∅
<Bloco> ::= {<Lista-Instruções>}
<Instrução> ::= <Se> | <Enquanto> | <Para> | <Chamada-Função> | <Atribuição> | return`SP`<Identificador-Expressão>;
<Se> ::= if(<Expressão>)<Bloco>; | if(<Expressão>)<Bloco>else<Bloco>;
<Enquanto> ::= while(<Expressão>)<Bloco>;
<Para> ::= for(<Atribuição>; <Expressão>; <Atribuição>)<Bloco>;
<Função> ::= <Tipo>`SP`<Identificador>(<Parâmetros>)<Bloco>;
<Declaração> ::= <Tipo>`SP`<Lista-Identificadores>;
<Tipo> ::= Float | Int | String | Char | Boolean | List<<Tipo>>
<Parâmetros> ::= <Tipo>`SP`<Identificador>, <Parâmetros> | <Tipo>`SP`<Identificador>
<Atribuição> ::= <Identificador-Expressão><Atribuição-Valores>;
<Atribuição-Valores> ::= = <Matemática> | = “<Texto>” | = <Bool>
<Bool> ::= True | False
<Expressão> ::= <Termo-Lógico><Expressão-Termo-Lógico>
<Expressão-Termo-Lógico> ::= `SP`&&`SP`<Expressão> | `SP`||`SP`<Expressão> | ∅
<Termo-Lógico> ::= <Matemática> <Termo-Lógico-Mat> | “<Texto>” <Termo-Lógico-Texto>
<Termo-Lógico-Texto> ::= == <Termo-Lógico> | ∅
<Termo-Lógico-Mat> ::= == <Termo-Lógico> | != <Termo-Lógico> | >= <Termo-Lógico> | <= <Termo-Lógico> | > <Termo-Lógico> | < <Termo-Lógico> | ∅
<Texto> ::= [A-z`SP`0-9?!+-/*=:[]]<Texto> | [A-z`SP`0-9?!+-/*=:[]]
<Matemática> ::= <Prioridade-Baixa><Matemática-Prioridade-Baixa>
<Matématica-Prioridade-Baixa> ::= + <Matemática> | − <Matemática> | ∅
<Prioridade-Baixa> ::= <Prioridade-Alta><Prioridade-Baixa-Alta> 
<Prioridade-Baixa-Alta> ::= ∗ <Prioridade-Baixa> | / <Prioridade-Baixa> | % <Prioridade-Baixa> | ∅
<Prioridade-Alta> ::= <Identificador-Expressão> | <Número> | <Chamada-Função> | (<Expressão>) | !<Expressão>
<Lista-Identificadores> ::= <Identificador>, <Lista-Identificadores> | <Identificador>
<Identificador-Expressão> ::= <Identificador>[<Expressão>] | <Identificador>
<Identificador> ::= [A-z]<Identificador> | [A-z]
<Número> ::= <Lista-Dígitos>.<Lista-Dígitos> | <Lista-Dígitos>
<Lista-Dígitos> ::= [0-9]<Lista-Dígitos> | [0-9]
<Chamada-Função> ::= <Identificador>(<Argumentos>);
<Argumentos> ::= <Expressão>,<Argumentos> | <Expressão>
